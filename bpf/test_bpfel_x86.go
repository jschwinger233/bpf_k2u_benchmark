// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadTest returns the embedded CollectionSpec for Test.
func LoadTest() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TestBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Test: %w", err)
	}

	return spec, err
}

// LoadTestObjects loads Test and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TestObjects
//	*TestPrograms
//	*TestMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTestObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTest()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TestSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestSpecs struct {
	TestProgramSpecs
	TestMapSpecs
}

// TestSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestProgramSpecs struct {
	PerfTest            *ebpf.ProgramSpec `ebpf:"perf_test"`
	QueueTest           *ebpf.ProgramSpec `ebpf:"queue_test"`
	RingbufNowakeupTest *ebpf.ProgramSpec `ebpf:"ringbuf_nowakeup_test"`
	RingbufWakeupTest   *ebpf.ProgramSpec `ebpf:"ringbuf_wakeup_test"`
}

// TestMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestMapSpecs struct {
	MetaPerf     *ebpf.MapSpec `ebpf:"meta_perf"`
	MetaQueue    *ebpf.MapSpec `ebpf:"meta_queue"`
	MetaRingbuf1 *ebpf.MapSpec `ebpf:"meta_ringbuf1"`
	MetaRingbuf2 *ebpf.MapSpec `ebpf:"meta_ringbuf2"`
}

// TestObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestObjects struct {
	TestPrograms
	TestMaps
}

func (o *TestObjects) Close() error {
	return _TestClose(
		&o.TestPrograms,
		&o.TestMaps,
	)
}

// TestMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestMaps struct {
	MetaPerf     *ebpf.Map `ebpf:"meta_perf"`
	MetaQueue    *ebpf.Map `ebpf:"meta_queue"`
	MetaRingbuf1 *ebpf.Map `ebpf:"meta_ringbuf1"`
	MetaRingbuf2 *ebpf.Map `ebpf:"meta_ringbuf2"`
}

func (m *TestMaps) Close() error {
	return _TestClose(
		m.MetaPerf,
		m.MetaQueue,
		m.MetaRingbuf1,
		m.MetaRingbuf2,
	)
}

// TestPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestPrograms struct {
	PerfTest            *ebpf.Program `ebpf:"perf_test"`
	QueueTest           *ebpf.Program `ebpf:"queue_test"`
	RingbufNowakeupTest *ebpf.Program `ebpf:"ringbuf_nowakeup_test"`
	RingbufWakeupTest   *ebpf.Program `ebpf:"ringbuf_wakeup_test"`
}

func (p *TestPrograms) Close() error {
	return _TestClose(
		p.PerfTest,
		p.QueueTest,
		p.RingbufNowakeupTest,
		p.RingbufWakeupTest,
	)
}

func _TestClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed test_bpfel_x86.o
var _TestBytes []byte
